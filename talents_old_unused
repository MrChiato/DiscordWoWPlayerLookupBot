const { SlashCommandBuilder } = require('discord.js');
const FormData = require('form-data');
const { URL, URLSearchParams } = require('url');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('talents')
    .setDescription('Returns the highest ranking talent build for an encounter and class')
    .addStringOption(option =>
      option.setName('content')
        .setDescription('The content to search for')
        .setRequired(true)
        .addChoices(
          { name: 'Vault of the Incarnates (Mythic)', value: 'vault-of-the-incarnates-mythic' },
          { name: 'Season 1 Mythic+ Dungeons', value: 'season-1-mythic-plus' },
        )
    )
    .addStringOption(option =>
      option.setName('class')
        .setDescription('The class to search for')
        .setRequired(true)
        .addChoices(
          { name: 'Death Knight', value: 'death-knight' },
          { name: 'Demon Hunter', value: 'demon-hunter' },
          { name: 'Druid', value: 'druid' },
          { name: 'Hunter', value: 'hunter' },
          { name: 'Mage', value: 'mage' },
          { name: 'Monk', value: 'monk' },
          { name: 'Paladin', value: 'paladin' },
          { name: 'Priest', value: 'priest' },
          { name: 'Rogue', value: 'rogue' },
          { name: 'Shaman', value: 'shaman' },
          { name: 'Warlock', value: 'warlock' },
          { name: 'Warrior', value: 'warrior' },
        )
    )
    .addStringOption(option =>
      option.setName('spec')
        .setDescription('The specialization to search for')
        .setRequired(true)
    )
    .addStringOption(option =>
      option.setName('region')
        .setDescription('The region to search for')
        .setRequired(true)
        .addChoices(
          { name: 'United States', value: 'US' },
          { name: 'European Union', value: 'EU' },
        )
    ),
    async execute(interaction) {
        const content = interaction.options.getString('content');
        const playerClass = interaction.options.getString('class');
        const spec = interaction.options.getString('spec');
        const region = interaction.options.getString('region');
    
        let encounterID;
    
        if (content === 'vault-of-the-incarnates-mythic') {
          encounterID = 2434;
        } else if (content === 'season-1-mythic-plus') {
          encounterID = 0;
        }
    
        const clientId = '988d50a9-7953-4fe1-b0d5-cb71537b0b9d';
        const clientSecret = '2iivJJ5rp44ArwXwIZPZ2U8JJECBFyvcbUktb0Wa';
        const redirectUri = 'https://example.com/callback';
        const scopes = ['public'];
    
        // Redirect the user to the authorization endpoint
        const authorizationUrl = new URL('https://www.warcraftlogs.com/oauth/authorize');
        authorizationUrl.searchParams.append('response_type', 'code');
        authorizationUrl.searchParams.append('client_id', clientId);
        authorizationUrl.searchParams.append('redirect_uri', redirectUri);
        authorizationUrl.searchParams.append('scope', scopes.join(' '));
        await interaction.reply(`Please click the following link to authorize the bot to access your Warcraft Logs data: ${authorizationUrl.toString()}`);
    
        // Handle the OAuth2 callback and exchange the authorization code for an access token
        const authorizationCode = '123456'; // Replace with the actual authorization code obtained from the callback
        const tokenUrl = 'https://www.warcraftlogs.com/oauth/token';
        const formData = new FormData();
        formData.append('grant_type', 'authorization_code');
        formData.append('code', authorizationCode);
        formData.append('client_id', clientId);
        formData.append('client_secret', clientSecret);
        formData.append('redirect_uri', redirectUri);
    
        const responsev2 = await fetch(tokenUrl, {
          method: 'POST',
          body: formData,
        });
    
        const datav2 = await responsev2.json();
        const accessToken = datav2.access_token;
    
        // Fetch the rankings data
        const response = await fetch(`https://www.warcraftlogs.com:443/v2/rankings/encounter/${encounterID}?class=${playerClass}&spec=${spec}&region=${region}&metric=dps&api_key=${accessToken}`);
        const data = await response.json();
    
        // Get the highest ranking talent build and reply to the interaction
        const talentBuild = data.rankings[0].talents.map(talent => talent.name).join(', ');
        await interaction.reply(`The highest ranking talent build for ${playerClass} ${spec} in ${content} in the ${region} region is: ${talentBuild}`);
      },
    };
    
